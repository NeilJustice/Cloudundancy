project(libCloudundancyTests)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

include_directories(${CMAKE_SOURCE_DIR})
if(UNIX)
   include_directories(${CMAKE_CURRENT_SOURCE_DIR}) # Includes directory libCloudundancyTests so that pch.h can be found
endif()
include_directories(${ZenUnitIncludeDirectory})
include_directories(${MetalMockIncludeDirectory})

folder_source_group(Components)
folder_source_group_subfolder(Components Assertion)
folder_source_group_subsubfolder(Components Assertion MetalMock)
folder_source_group_subfolder(Components Compiler)
folder_source_group_subfolder(Components Console)
folder_source_group_subsubfolder(Components Console MetalMock)
folder_source_group_subfolder(Components Docopt)
folder_source_group_subsubfolder(Components Docopt ZenUnit)
folder_source_group_subsubfolder(Components Docopt MetalMock)
folder_source_group_subfolder(Components Exception)
folder_source_group_subsubfolder(Components Exception MetalMock)
folder_source_group_subfolder(Components FileSystem)
folder_source_group_subsubfolder(Components FileSystem ZenUnit)
folder_source_group_subsubfolder(Components FileSystem MetalMock)
folder_source_group_subfolder(Components FunctionCallers)
folder_source_group_subsubfolder(Components FunctionCallers Member)
folder_source_group_subsubsubfolder(Components FunctionCallers Member MetalMock)
folder_source_group_subsubfolder(Components FunctionCallers NonMember)
folder_source_group_subsubsubfolder(Components FunctionCallers NonMember MetalMock)
folder_source_group_subfolder(Components Iteration)
folder_source_group_subsubfolder(Components Iteration ForEach)
folder_source_group_subsubsubfolder(Components Iteration ForEach MetalMock)
folder_source_group_subsubfolder(Components Iteration Tranform)
folder_source_group_subsubsubfolder(Components Iteration Tranform MetalMock)
folder_source_group_subfolder(Components Process)
folder_source_group_subsubfolder(Components Process Linux)
folder_source_group_subsubsubfolder(Components Process Linux MetalMock)
folder_source_group_subsubfolder(Components Process Windows)
folder_source_group_subsubsubfolder(Components Process Windows MetalMock)
folder_source_group_subsubfolder(Components Process MetalMock)
folder_source_group_subsubfolder(Components Process ZenUnit)
folder_source_group_subfolder(Components Iteration)
folder_source_group_subsubfolder(Components Iteration ForEach)
folder_source_group_subsubsubfolder(Components Iteration ForEach MetalMock)
folder_source_group_subsubfolder(Components Iteration Math)
folder_source_group_subsubsubfolder(Components Iteration Math MetalMock)
folder_source_group_subsubfolder(Components Iteration Transform)
folder_source_group_subsubsubfolder(Components Iteration Transform MetalMock)
folder_source_group_subfolder(Components Memory)
folder_source_group_subsubfolder(Components Memory MetalMock)
folder_source_group_subfolder(Components Process)
folder_source_group_subfolder(Components Random)
folder_source_group_subsubfolder(Components Random MetalMock)
folder_source_group_subfolder(Components Strings)
folder_source_group_subsubfolder(Components Strings MetalMock)
folder_source_group_subfolder(Components SubPrograms)
folder_source_group_subsubfolder(Components SubPrograms MetalMock)
folder_source_group_subfolder(Components Time)
folder_source_group_subsubfolder(Components Time ZenUnit)
folder_source_group_subsubfolder(Components Time MetalMock)
folder_source_group_subfolder(Components Types)
folder_source_group_subfolder(Components MetalMock)
folder_source_group(Enums)
folder_source_group(Utilities)
folder_source_group(ValueTypes)
folder_source_group_subsubfolder(ValueTypes ZenUnit Equalizer)
folder_source_group_subsubfolder(ValueTypes ZenUnit Random)
folder_source_group(ZenUnitTesting)

file(GLOB_RECURSE Sources *.h *.cpp)
source_group("" FILES ${Sources})

add_executable(libCloudundancyTests ${Sources})

target_link_libraries(libCloudundancyTests libCloudundancy)
if(UNIX)
   target_link_libraries(libCloudundancyTests stdc++fs)
endif()

EnablePrecompiledHeaders()
IfMSVCAddRunTestsPostBuildStep()

if(UNIX)
   if(CodeCovMode)
     target_link_libraries(libCloudundancyTests CodeCovLibraryInterface)
   endif()
endif()
