project(libCloudundancy)
include(${CMAKE_SOURCE_DIR}/CMakeMacros.cmake)

include_directories(${CMAKE_SOURCE_DIR})
if(UNIX)
   include_directories(${CMAKE_CURRENT_SOURCE_DIR}) # Includes directory libCloudundancy so that pch.h can be found
endif()

folder_source_group(Components)
folder_source_group(Compiler)
folder_source_group_subfolder(Components Args)
folder_source_group_subfolder(Components SubPrograms)
folder_source_group_subfolder(Components FileSystem)
folder_source_group_subfolder(Components IniFile)
folder_source_group(Enums)
folder_source_group(Exceptions)
folder_source_group(StaticUtilities)
folder_source_group(UtilityComponents)
folder_source_group_subfolder(UtilityComponents Assertion)
folder_source_group_subfolder(UtilityComponents Console)
folder_source_group_subsubfolder(UtilityComponents Console Windows)
folder_source_group_subfolder(UtilityComponents Docopt)
folder_source_group_subfolder(UtilityComponents Environment)
folder_source_group_subfolder(UtilityComponents ErrorHandling)
folder_source_group_subfolder(UtilityComponents Exception)
folder_source_group_subfolder(UtilityComponents FileSystem)
folder_source_group_subfolder(UtilityComponents FunctionCallers)
folder_source_group_subsubfolder(UtilityComponents FunctionCallers Member)
folder_source_group_subsubfolder(UtilityComponents FunctionCallers NonMember)
folder_source_group_subfolder(UtilityComponents Iteration)
folder_source_group_subsubfolder(UtilityComponents Iteration ForEach)
folder_source_group_subsubfolder(UtilityComponents Iteration Transform)
folder_source_group_subfolder(UtilityComponents Memory)
folder_source_group_subfolder(UtilityComponents Process)
folder_source_group_subsubfolder(UtilityComponents Process Linux)
folder_source_group_subsubfolder(UtilityComponents Process Windows)
folder_source_group_subfolder(UtilityComponents Time)
folder_source_group_subfolder(UtilityComponents Types)
folder_source_group(ValueTypes)

file(GLOB_RECURSE Sources *.h *.cpp *.ui)
source_group("" FILES ${Sources})

add_library(libCloudundancy ${Sources})

IfMSVCEnablePrecompiledHeaders()

if(UNIX)
   if(LCovCodeCoverageMode)
     target_link_libraries(libCloudundancy CodeCovLibraryInterface)
   endif()
endif()
